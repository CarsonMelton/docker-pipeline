name: Secure CI/CD Pipeline

on:
  push:
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  security-scans:
    runs-on: ubuntu-latest

    steps:
      # ---------------------------
      # Checkout repository
      # ---------------------------
      - name: Checkout repository
        uses: actions/checkout@v5

      # ---------------------------
      # Set up Python
      # ---------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # ---------------------------
      # Prepare reports directory
      # ---------------------------
      - name: Create reports folder
        run: mkdir -p reports

      # ---------------------------
      # Run Gitleaks
      # ---------------------------
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --report-format sarif --report-path reports/gitleaks.sarif --exit-code 0


      - name: Upload Gitleaks SARIF
        if: always() && hashFiles('reports/gitleaks.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/gitleaks.sarif

      # ---------------------------
      # Run pip-audit
      # ---------------------------
      - name: Install pip-audit
        run: pip install --upgrade pip-audit

      - name: Run pip-audit
        run: pip-audit -r requirements.txt -f json -o reports/pip-audit.json || true

      - name: Convert pip-audit JSON to SARIF
        if: always() && hashFiles('reports/pip-audit.json') != ''
        run: |
          python3 << 'EOF'
          import json, os

          with open("reports/pip-audit.json") as f:
              try:
                  data = json.load(f)
              except json.JSONDecodeError:
                  print("pip-audit produced invalid JSON, skipping SARIF conversion")
                  exit(0)

          sarif = {
              "version": "2.1.0",
              "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
              "runs": [{
                  "tool": {
                      "driver": {
                          "name": "pip-audit",
                          "informationUri": "https://github.com/pypa/pip-audit",
                          "rules": []
                      }
                  },
                  "results": []
              }]
          }

          rules = {}
          results = []

          for dep in data:
              pkg = dep.get("name")
              version = dep.get("version")
              vulns = dep.get("vulns", [])
              for vuln in vulns:
                  vuln_id = vuln.get("id")
                  advisory = vuln.get("description", "")
                  fix_versions = vuln.get("fix_versions", [])

                  if vuln_id not in rules:
                      rules[vuln_id] = {
                          "id": vuln_id,
                          "name": vuln_id,
                          "shortDescription": {"text": advisory or "Dependency vulnerability"},
                          "fullDescription": {"text": advisory or "Reported by pip-audit"},
                          "help": {"text": f"Upgrade {pkg} from {version} to {fix_versions}" if fix_versions else "No fix available"}
                      }

                  results.append({
                      "ruleId": vuln_id,
                      "level": "error",
                      "message": {"text": f"{pkg} {version} is vulnerable: {advisory}"},
                      "locations": [{
                          "physicalLocation": {
                              "artifactLocation": {"uri": "requirements.txt"}
                          }
                      }]
                  })

          sarif["runs"][0]["tool"]["driver"]["rules"] = list(rules.values())
          sarif["runs"][0]["results"] = results

          with open("reports/pip-audit.sarif", "w") as f:
              json.dump(sarif, f, indent=2)
          EOF

      - name: Upload pip-audit SARIF
        if: always() && hashFiles('reports/pip-audit.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/pip-audit.sarif

      - name: Upload pip-audit JSON artifact
        if: always() && hashFiles('reports/pip-audit.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-json
          path: reports/pip-audit.json

      # ---------------------------
      # Run Bandit
      # ---------------------------
      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit
        run: bandit -r . -f sarif -o reports/bandit.sarif || true

      - name: Upload Bandit SARIF
        if: always() && hashFiles('reports/bandit.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/bandit.sarif

      # ---------------------------
      # Run Trivy Docker scan
      # ---------------------------
      - name: Build Docker image
        run: docker build -t insecure-app .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: insecure-app
          format: sarif
          output: reports/trivy-image.sarif
          exit-code: '0'

      - name: Upload Trivy SARIF
        if: always() && hashFiles('reports/trivy-image.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/trivy-image.sarif

      # ---------------------------
      # Upload all reports as artifact
      # ---------------------------
      - name: Upload all reports
        if: always() && hashFiles('reports/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/
